// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let localStream = null;
let remoteStream = null;
let isAudioMuted = false;
let isVideoOff = false;
let peerConnection = null;
let socket = null;
let roomId = null;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è STUN-—Å–µ—Ä–≤–µ—Ä–æ–≤
const configuration = {
    iceServers: [
        { urls: 'stun:stun.l.google.com:19302' },
        { urls: 'stun:stun1.l.google.com:19302' }
    ]
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
async function init() {
    try {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∫–æ–º–Ω–∞—Ç—ã
        roomId = window.location.hash.substring(1) || generateRoomId();
        
        // –ï—Å–ª–∏ –∫–æ–º–Ω–∞—Ç—ã –Ω–µ –±—ã–ª–æ –≤ URL, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–µ –≤ hash
        if (!window.location.hash) {
            window.location.hash = roomId;
        }
        
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É Socket.io
        socket = io();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—à—É –∫–∞–º–µ—Ä—É
        await startLocalVideo();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π Socket.io
        setupSocketEvents();
        
        // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ
        socket.emit('join-room', roomId);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ ID –∫–æ–º–Ω–∞—Ç—ã
function generateRoomId() {
    return Math.random().toString(36).substring(2, 10);
}

// –ó–∞–ø—É—Å–∫ –Ω–∞—à–µ–π –ª–æ–∫–∞–ª—å–Ω–æ–π –∫–∞–º–µ—Ä—ã
async function startLocalVideo() {
    try {
        localStream = await navigator.mediaDevices.getUserMedia({ 
            video: true, 
            audio: true 
        });
        document.getElementById('localVideo').srcObject = localStream;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ/–º–∏–∫—Ä–æ—Ñ–æ–Ω—É:', error);
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π Socket.io
function setupSocketEvents() {
    // 1. –ú—ã –ø–µ—Ä–≤—ã–µ –≤ –∫–æ–º–Ω–∞—Ç–µ - –∂–¥–µ–º –≤—Ç–æ—Ä–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    socket.on('you-are-the-first', () => {
        console.log('–í—ã –ø–µ—Ä–≤—ã–π –≤ –∫–æ–º–Ω–∞—Ç–µ. –û–∂–∏–¥–∞–µ–º –≤—Ç–æ—Ä–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞...');
    });

    // 2. –í –∫–æ–º–Ω–∞—Ç—É –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Å–æ–∑–¥–∞–µ–º offer
    socket.on('user-joined', async (data) => {
        console.log('–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è:', data.newUserId);
        await createOffer(data.newUserId);
    });

    // 3. –ü–æ–ª—É—á–∏–ª–∏ offer - —Å–æ–∑–¥–∞–µ–º answer
    socket.on('offer', async (data) => {
        console.log('–ü–æ–ª—É—á–µ–Ω offer –æ—Ç:', data.from);
        await createAnswer(data.offer, data.from);
    });

    // 4. –ü–æ–ª—É—á–∏–ª–∏ answer - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    socket.on('answer', async (data) => {
        console.log('–ü–æ–ª—É—á–µ–Ω answer –æ—Ç:', data.from);
        await setRemoteAnswer(data.answer);
    });

    // 5. –ü–æ–ª—É—á–∏–ª–∏ ICE-–∫–∞–Ω–¥–∏–¥–∞—Ç - –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
    socket.on('ice-candidate', async (data) => {
        console.log('–ü–æ–ª—É—á–µ–Ω ICE candidate –æ—Ç:', data.from);
        try {
            await peerConnection.addIceCandidate(new RTCIceCandidate(data.candidate));
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ICE candidate:', error);
        }
    });

    // 6. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ –∫–æ–º–Ω–∞—Ç—ã (–£–ü–†–û–©–ê–ï–ú)
    socket.on('user-left', (data) => {
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª:', data.userId);
        // –ü—Ä–æ—Å—Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–≤–æ–Ω–æ–∫ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        simpleHangup();
    });
}

// –°–æ–∑–¥–∞–Ω–∏–µ PeerConnection
function createPeerConnection(targetUserId) {
    peerConnection = new RTCPeerConnection(configuration);

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—à–∏ —Ç—Ä–µ–∫–∏ –≤ PeerConnection
    localStream.getTracks().forEach(track => {
        peerConnection.addTrack(track, localStream);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤
    peerConnection.ontrack = (event) => {
        console.log('–ü–æ–ª—É—á–µ–Ω —É–¥–∞–ª–µ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫');
        remoteStream = event.streams[0];
        document.getElementById('remoteVideo').srcObject = remoteStream;
    };

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ICE-–∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    peerConnection.onicecandidate = (event) => {
        if (event.candidate) {
            console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º ICE candidate');
            socket.emit('ice-candidate', {
                targetUserId: targetUserId,
                candidate: event.candidate
            });
        }
    };

    return peerConnection;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ offer
async function createOffer(targetUserId) {
    try {
        peerConnection = createPeerConnection(targetUserId);
        
        const offer = await peerConnection.createOffer();
        await peerConnection.setLocalDescription(offer);
        
        socket.emit('offer', {
            targetUserId: targetUserId,
            offer: offer
        });
        
        console.log('Offer —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è offer:', error);
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ answer
async function createAnswer(offer, targetUserId) {
    try {
        peerConnection = createPeerConnection(targetUserId);
        
        await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));
        const answer = await peerConnection.createAnswer();
        await peerConnection.setLocalDescription(answer);
        
        socket.emit('answer', {
            targetUserId: targetUserId,
            answer: answer
        });
        
        console.log('Answer —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è answer:', error);
    }
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ answer
async function setRemoteAnswer(answer) {
    try {
        await peerConnection.setRemoteDescription(new RTCSessionDescription(answer));
        console.log('Remote description —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ remote description:', error);
    }
}

// –ü—Ä–æ—Å—Ç–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞ (–ë–ï–ó –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏)
function simpleHangup() {
    console.log('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞');
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –º–µ–¥–∏–∞–ø–æ—Ç–æ–∫–∏
    if (localStream) {
        localStream.getTracks().forEach(track => track.stop());
    }
    if (remoteStream) {
        remoteStream.getTracks().forEach(track => track.stop());
    }

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º PeerConnection
    if (peerConnection) {
        peerConnection.close();
        peerConnection = null;
    }

    // –û—á–∏—â–∞–µ–º –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç—ã
    document.getElementById('localVideo').srcObject = null;
    document.getElementById('remoteVideo').srcObject = null;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    document.body.innerHTML = `
        <div style="width:100%; height:100%; background-color:black; color:white; 
                   display:flex; justify-content:center; align-items:center; 
                   font-family:sans-serif; text-align:center; padding:20px;">
            <div>
                <h2>–ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω</h2>
                <button onclick="window.location.reload()" 
                        style="padding:10px 20px; background-color:#4CAF50; color:white; 
                               border:none; border-radius:5px; cursor:pointer; margin:5px;">
                    –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∑–≤–æ–Ω–æ–∫
                </button>
            </div>
        </div>
    `;
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞
function hangUp() {
    // –¢–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ, –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä—É –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
    simpleHangup();
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞—É–¥–∏–æ
function toggleAudio() {
    if (localStream) {
        const audioTracks = localStream.getAudioTracks();
        if (audioTracks.length > 0) {
            isAudioMuted = !isAudioMuted;
            audioTracks[0].enabled = !isAudioMuted;
            document.getElementById('toggleAudioButton').textContent = isAudioMuted ? 'üé§‚ùå' : 'üé§';
        }
    }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–µ–æ
function toggleVideo() {
    if (localStream) {
        const videoTracks = localStream.getVideoTracks();
        if (videoTracks.length > 0) {
            isVideoOff = !isVideoOff;
            videoTracks[0].enabled = !isVideoOff;
            document.getElementById('toggleVideoButton').textContent = isVideoOff ? 'üé•‚ùå' : 'üé•';
        }
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
function showError(message) {
    document.body.innerHTML = `
        <div style="width:100%; height:100%; background-color:black; color:white; 
                   display:flex; justify-content:center; align-items:center; 
                   font-family:sans-serif; text-align:center; padding:20px;">
            <div>
                <h2>–û—à–∏–±–∫–∞</h2>
                <p>${message}</p>
                <button onclick="window.location.reload()" 
                        style="padding:10px 20px; background-color:#f44336; color:white; 
                               border:none; border-radius:5px; cursor:pointer;">
                    –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                </button>
            </div>
        </div>
    `;
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∫–æ–≥–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è
document.addEventListener('DOMContentLoaded', init);
