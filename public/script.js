// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let localStream = null;
let remoteStream = null;
let isAudioMuted = false;
let isVideoOff = false;
let peerConnection = null;
let socket = null;
let roomId = null;
let currentFacingMode = 'user';
let videoTrack = null;
let isReconnecting = false;
let reconnectAttempts = 0;
const MAX_RECONNECT_ATTEMPTS = 50;

// –£–õ–£–ß–®–ï–ù–ù–ê–Ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è STUN-—Å–µ—Ä–≤–µ—Ä–æ–≤
const configuration = {
    iceServers: [
        { urls: 'stun:stun.l.google.com:19302' },
        { urls: 'stun:stun1.l.google.com:19302' },
        { urls: 'stun:stun2.l.google.com:19302' },
        { urls: 'stun:stun3.l.google.com:19302' },
        { urls: 'stun:stun4.l.google.com:19302' },
        { urls: 'stun:stun.voipbuster.com:3478' },
        { urls: 'stun:stun.services.mozilla.com:3478' }
    ],
    iceCandidatePoolSize: 10,
    iceTransportPolicy: 'all'
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
async function init() {
    try {
        const urlParams = new URLSearchParams(window.location.search);
        roomId = urlParams.get('room') || generateRoomId();
        
        if (!urlParams.has('room')) {
            const newUrl = `${window.location.origin}${window.location.pathname}?room=${roomId}`;
            window.history.replaceState({}, '', newUrl);
        }
        
        socket = io();
        await startLocalVideo();
        setupSocketEvents();
        socket.emit('join-room', roomId);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        setInterval(checkAndRestoreInterface, 1000);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
    }
}

function generateRoomId() {
    return Math.random().toString(36).substring(2, 10);
}

async function startLocalVideo() {
    try {
        localStream = await navigator.mediaDevices.getUserMedia({ 
            video: { facingMode: 'user' },
            audio: true 
        });
        videoTrack = localStream.getVideoTracks()[0];
        document.getElementById('localVideo').srcObject = localStream;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ/–º–∏–∫—Ä–æ—Ñ–æ–Ω—É:', error);
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É');
    }
}

async function switchCamera() {
    try {
        console.log('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã...');
        if (videoTrack) videoTrack.stop();
        const newFacingMode = currentFacingMode === 'user' ? 'environment' : 'user';
        currentFacingMode = newFacingMode;
        const newStream = await navigator.mediaDevices.getUserMedia({ 
            video: { facingMode: newFacingMode },
            audio: true 
        });
        const newVideoTrack = newStream.getVideoTracks()[0];
        if (localStream) {
            const oldVideoTrack = localStream.getVideoTracks()[0];
            localStream.removeTrack(oldVideoTrack);
            localStream.addTrack(newVideoTrack);
            videoTrack = newVideoTrack;
        }
        document.getElementById('localVideo').srcObject = localStream;
        if (peerConnection) {
            const sender = peerConnection.getSenders().find(s => 
                s.track && s.track.kind === 'video'
            );
            if (sender) await sender.replaceTrack(newVideoTrack);
        }
        newStream.getAudioTracks().forEach(track => track.stop());
        console.log('–ö–∞–º–µ—Ä–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞ –Ω–∞:', newFacingMode);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –∫–∞–º–µ—Ä—ã:', error);
    }
}

// –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
function showStatusNotification(message, type) {
    const notifications = document.getElementById('statusNotifications');
    const notification = document.createElement('div');
    notification.className = `status-notification status-${type}`;
    notification.textContent = message;
    
    notifications.appendChild(notification);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        if (notification.parentNode) {
            notification.parentNode.removeChild(notification);
        }
    }, 5000);
}

// –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É
function sendStatusToPeer() {
    if (socket && roomId) {
        socket.emit('user-status', {
            audioMuted: isAudioMuted,
            videoOff: isVideoOff
        });
    }
}

// –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function checkAndRestoreInterface() {
    if (remoteStream && document.querySelector('.video-container') === null) {
        console.log('–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
        restoreInterface();
    }
}

// –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
function tryReconnect() {
    if (isReconnecting) return;
    
    isReconnecting = true;
    reconnectAttempts++;
    
    console.log(`–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è #${reconnectAttempts}`);
    showReconnectingMessage();
    
    if (reconnectAttempts >= 2) {
        console.log('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ 2 –ø–æ–ø—ã—Ç–æ–∫...');
        setTimeout(() => {
            window.location.reload(true);
        }, 1000);
        return;
    }
    
    if (socket && roomId) {
        socket.emit('join-room', roomId);
    }
    
    setTimeout(() => {
        isReconnecting = false;
    }, 2000);
}

// –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
function showReconnectingMessage() {
    document.body.innerHTML = `
        <div style="width:100%; height:100%; background-color:black; color:white; 
                   display:flex; justify-content:center; align-items:center; 
                   font-family:sans-serif; text-align:center; padding:20px;">
            <div>
                <h2>–°–≤—è–∑—å –ø—Ä–µ—Ä–≤–∞–ª–∞—Å—å</h2>
                <p>–ü—ã—Ç–∞—é—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...</p>
            </div>
        </div>
    `;
}

// –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
function showReloadMessage() {
    document.body.innerHTML = `
        <div style="width:100%; height:100%; background-color:black; color:white; 
                   display:flex; justify-content:center; align-items:center; 
                   font-family:sans-serif; text-align:center; padding:20px;">
            <div>
                <h2>–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤—è–∑—å</h2>
                <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É</p>
                <button onclick="window.location.reload(true)" 
                        style="padding:10px 20px; background-color:#4CAF50; color:white; 
                               border:none; border-radius:5px; cursor:pointer; margin:5px;">
                    –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å
                </button>
            </div>
        </div>
    `;
}

// –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function restoreInterface() {
    document.body.innerHTML = `
        <div class="video-container">
            <video id="remoteVideo" autoplay playsinline></video>
            <video id="localVideo" autoplay muted playsinline></video>
            <div class="controls">
                <button id="toggleAudioButton" class="control-button">üé§</button>
                <button id="toggleVideoButton" class="control-button">üé•</button>
            </div>
            <div id="statusNotifications" class="status-notifications"></div>
        </div>
    `;
    
    if (localStream) {
        document.getElementById('localVideo').srcObject = localStream;
    }
    if (remoteStream) {
        document.getElementById('remoteVideo').srcObject = remoteStream;
    }
    
    // –ü–µ—Ä–µ–ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    document.getElementById('toggleAudioButton').onclick = toggleAudio;
    document.getElementById('toggleVideoButton').onclick = toggleVideo;
    document.getElementById('localVideo').onclick = switchCamera;
}

function setupSocketEvents() {
    socket.on('you-are-the-first', () => {
        console.log('–í—ã –ø–µ—Ä–≤—ã–π –≤ –∫–æ–º–Ω–∞—Ç–µ. –û–∂–∏–¥–∞–µ–º –≤—Ç–æ—Ä–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞...');
    });
    
    socket.on('user-joined', async (data) => {
        console.log('–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è:', data.newUserId);
        reconnectAttempts = 0;
        await createOffer(data.newUserId);
    });
    
    socket.on('offer', async (data) => {
        console.log('–ü–æ–ª—É—á–µ–Ω offer –æ—Ç:', data.from);
        await createAnswer(data.offer, data.from);
    });
    
    socket.on('answer', async (data) => {
        console.log('–ü–æ–ª—É—á–µ–Ω answer –æ—Ç:', data.from);
        await setRemoteAnswer(data.answer);
    });
    
    socket.on('ice-candidate', async (data) => {
        console.log('–ü–æ–ª—É—á–µ–Ω ICE candidate –æ—Ç:', data.from);
        try {
            await peerConnection.addIceCandidate(new RTCIceCandidate(data.candidate));
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ICE candidate:', error);
        }
    });
    
    // –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
    socket.on('user-status', (data) => {
        console.log('–ü–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å –æ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:', data);
        
        if (data.audioMuted) {
            showStatusNotification('–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –æ—Ç–∫–ª—é—á–∏–ª –º–∏–∫—Ä–æ—Ñ–æ–Ω', 'audio-muted');
        }
        
        if (data.videoOff) {
            showStatusNotification('–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –æ—Ç–∫–ª—é—á–∏–ª –∫–∞–º–µ—Ä—É', 'video-off');
        }
    });
    
    socket.on('user-left', (data) => {
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª:', data.userId);
        tryReconnect();
    });
    
    socket.on('disconnect', () => {
        console.log('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ');
        tryReconnect();
    });
    
    socket.on('connect', () => {
        console.log('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        if (roomId) {
            socket.emit('join-room', roomId);
        }
    });
}

function createPeerConnection(targetUserId) {
    peerConnection = new RTCPeerConnection(configuration);

    peerConnection.onconnectionstatechange = () => {
        console.log('–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', peerConnection.connectionState);
        if (peerConnection.connectionState === 'disconnected' || 
            peerConnection.connectionState === 'failed') {
            console.log('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ, –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å...');
            tryReconnect();
        }
    };

    peerConnection.oniceconnectionstatechange = () => {
        console.log('ICE —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', peerConnection.iceConnectionState);
    };

    localStream.getTracks().forEach(track => {
        peerConnection.addTrack(track, localStream);
    });

    peerConnection.ontrack = (event) => {
        console.log('–ü–æ–ª—É—á–µ–Ω —É–¥–∞–ª–µ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫');
        remoteStream = event.streams[0];
        document.getElementById('remoteVideo').srcObject = remoteStream;
        reconnectAttempts = 0;
        
        checkAndRestoreInterface();
    };

    peerConnection.onicecandidate = (event) => {
        if (event.candidate) {
            socket.emit('ice-candidate', {
                targetUserId: targetUserId,
                candidate: event.candidate
            });
        }
    };

    return peerConnection;
}

async function createOffer(targetUserId) {
    try {
        peerConnection = createPeerConnection(targetUserId);
        const offer = await peerConnection.createOffer();
        await peerConnection.setLocalDescription(offer);
        socket.emit('offer', {
            targetUserId: targetUserId,
            offer: offer
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è offer:', error);
        tryReconnect();
    }
}

async function createAnswer(offer, targetUserId) {
    try {
        peerConnection = createPeerConnection(targetUserId);
        await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));
        const answer = await peerConnection.createAnswer();
        await peerConnection.setLocalDescription(answer);
        socket.emit('answer', {
            targetUserId: targetUserId,
            answer: answer
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è answer:', error);
        tryReconnect();
    }
}

async function setRemoteAnswer(answer) {
    try {
        await peerConnection.setRemoteDescription(new RTCSessionDescription(answer));
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ remote description:', error);
        tryReconnect();
    }
}

function toggleAudio() {
    if (localStream) {
        const audioTracks = localStream.getAudioTracks();
        if (audioTracks.length > 0) {
            isAudioMuted = !isAudioMuted;
            audioTracks[0].enabled = !isAudioMuted;
            document.getElementById('toggleAudioButton').textContent = isAudioMuted ? 'üé§‚ùå' : 'üé§';
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É
            sendStatusToPeer();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–µ–±–µ
            if (isAudioMuted) {
                showStatusNotification('–í—ã –æ—Ç–∫–ª—é—á–∏–ª–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω', 'audio-muted');
            }
        }
    }
}

function toggleVideo() {
    if (localStream) {
        const videoTracks = localStream.getVideoTracks();
        if (videoTracks.length > 0) {
            isVideoOff = !isVideoOff;
            videoTracks[0].enabled = !isVideoOff;
            document.getElementById('toggleVideoButton').textContent = isVideoOff ? 'üé•‚ùå' : 'üé•';
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É
            sendStatusToPeer();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–µ–±–µ
            if (isVideoOff) {
                showStatusNotification('–í—ã –æ—Ç–∫–ª—é—á–∏–ª–∏ –∫–∞–º–µ—Ä—É', 'video-off');
            }
        }
    }
}

function showError(message) {
    document.body.innerHTML = `
        <div style="width:100%; height:100%; background-color:black; color:white; 
                   display:flex; justify-content:center; align-items:center; 
                   font-family:sans-serif; text-align:center; padding:20px;">
            <div>
                <h2>–û—à–∏–±–∫–∞</h2>
                <p>${message}</p>
            </div>
        </div>
    `;
}

document.addEventListener('DOMContentLoaded', init);
