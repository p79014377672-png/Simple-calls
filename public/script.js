// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let localStream = null;
let remoteStream = null;
let isAudioMuted = false;
let isVideoOff = false;
let peerConnection = null;
let socket = null;
let roomId = null;
let currentFacingMode = 'user';
let videoTrack = null;
let isReconnecting = false;
let reconnectAttempts = 0;
const MAX_RECONNECT_ATTEMPTS = 50;

// –ù–æ–≤—ã–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
let remoteAudioMuted = false;
let remoteVideoOff = false;

// –ó–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π
let isProcessingAudio = false;
let isProcessingVideo = false;

const configuration = {
    iceServers: [
        { urls: 'stun:stun.l.google.com:19302' },
        { urls: 'stun:stun1.l.google.com:19302' },
        { urls: 'stun:stun2.l.google.com:19302' },
        { urls: 'stun:stun3.l.google.com:19302' },
        { urls: 'stun:stun4.l.google.com:19302' },
        { urls: 'stun:stun.voipbuster.com:3478' },
        { urls: 'stun:stun.services.mozilla.com:3478' }
    ],
    iceCandidatePoolSize: 10,
    iceTransportPolicy: 'all'
};

async function init() {
    try {
        const urlParams = new URLSearchParams(window.location.search);
        roomId = urlParams.get('room') || generateRoomId();
        
        if (!urlParams.has('room')) {
            const newUrl = `${window.location.origin}${window.location.pathname}?room=${roomId}`;
            window.history.replaceState({}, '', newUrl);
        }
        
        socket = io();
        await startLocalVideo();
        setupSocketEvents();
        socket.emit('join-room', roomId);
        
        // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        setTimeout(() => {
            const audioButton = document.getElementById('toggleAudioButton');
            const videoButton = document.getElementById('toggleVideoButton');
            const localVideo = document.getElementById('localVideo');
            
            if (audioButton) {
                audioButton.onclick = toggleAudio;
                audioButton._listenerAttached = true;
            }
            if (videoButton) {
                videoButton.onclick = toggleVideo;
                videoButton._listenerAttached = true;
            }
            if (localVideo) {
                localVideo.onclick = switchCamera;
            }
        }, 1000);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
    }
}

function generateRoomId() {
    return Math.random().toString(36).substring(2, 10);
}

async function startLocalVideo() {
    try {
        localStream = await navigator.mediaDevices.getUserMedia({ 
            video: { facingMode: 'user' },
            audio: true 
        });
        videoTrack = localStream.getVideoTracks()[0];
        document.getElementById('localVideo').srcObject = localStream;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ/–º–∏–∫—Ä–æ—Ñ–æ–Ω—É:', error);
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É');
    }
}

async function switchCamera() {
    try {
        console.log('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã...');
        if (videoTrack) videoTrack.stop();
        const newFacingMode = currentFacingMode === 'user' ? 'environment' : 'user';
        currentFacingMode = newFacingMode;
        const newStream = await navigator.mediaDevices.getUserMedia({ 
            video: { facingMode: newFacingMode },
            audio: true 
        });
        const newVideoTrack = newStream.getVideoTracks()[0];
        if (localStream) {
            const oldVideoTrack = localStream.getVideoTracks()[0];
            localStream.removeTrack(oldVideoTrack);
            localStream.addTrack(newVideoTrack);
            videoTrack = newVideoTrack;
        }
        document.getElementById('localVideo').srcObject = localStream;
        if (peerConnection) {
            const sender = peerConnection.getSenders().find(s => 
                s.track && s.track.kind === 'video'
            );
            if (sender) await sender.replaceTrack(newVideoTrack);
        }
        newStream.getAudioTracks().forEach(track => track.stop());
        console.log('–ö–∞–º–µ—Ä–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞ –Ω–∞:', newFacingMode);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –∫–∞–º–µ—Ä—ã:', error);
    }
}

// –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function updatePersistentNotifications() {
    const container = document.getElementById('persistentNotifications');
    if (!container) return;

    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    container.innerHTML = '';

    // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∞—É–¥–∏–æ, –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ —É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
    if (remoteAudioMuted) {
        const audioNotification = document.createElement('div');
        audioNotification.className = 'persistent-notification audio-muted';
        audioNotification.innerHTML = 'üîá –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –æ—Ç–∫–ª—é—á–∏–ª –º–∏–∫—Ä–æ—Ñ–æ–Ω';
        container.appendChild(audioNotification);
    }

    // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–∏–¥–µ–æ, –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ —É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
    if (remoteVideoOff) {
        const videoNotification = document.createElement('div');
        videoNotification.className = 'persistent-notification video-off';
        videoNotification.innerHTML = 'üìπ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –æ—Ç–∫–ª—é—á–∏–ª –∫–∞–º–µ—Ä—É';
        container.appendChild(videoNotification);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–û–°–¢–ê–ï–¢–°–Ø –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏)
function showTemporaryNotification(message, type) {
    const notifications = document.getElementById('statusNotifications');
    const notification = document.createElement('div');
    notification.className = `status-notification status-${type}`;
    notification.textContent = message;
    
    notifications.appendChild(notification);
    
    setTimeout(() => {
        if (notification.parentNode) {
            notification.parentNode.removeChild(notification);
        }
    }, 3000);
}

function sendStatusToPeer() {
    if (socket && roomId) {
        socket.emit('user-status', {
            audioMuted: isAudioMuted,
            videoOff: isVideoOff
        });
    }
}

function checkAndRestoreInterface() {
    // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –Ω—É–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∫—Ä–∞–π–Ω–∏—Ö —Å–ª—É—á–∞–µ–≤
    if (document.querySelector('.video-container') === null) {
        console.log('–ü–æ–ª–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...');
        restoreInterface();
    }
}

function tryReconnect() {
    if (isReconnecting) return;
    
    isReconnecting = true;
    reconnectAttempts++;
    
    console.log(`–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è #${reconnectAttempts}`);
    showReconnectingMessage();
    
    if (reconnectAttempts >= 2) {
        console.log('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ 2 –ø–æ–ø—ã—Ç–æ–∫...');
        setTimeout(() => {
            window.location.reload(true);
        }, 1000);
        return;
    }
    
    if (socket && roomId) {
        socket.emit('join-room', roomId);
    }
    
    setTimeout(() => {
        isReconnecting = false;
    }, 2000);
}

function showReconnectingMessage() {
    document.body.innerHTML = `
        <div style="width:100%; height:100%; background-color:black; color:white; 
                   display:flex; flex-direction:column; justify-content:center; align-items:center; 
                   font-family:sans-serif; text-align:center; padding:20px;">
            <div>
                <h2>–°–≤—è–∑—å –ø—Ä–µ—Ä–≤–∞–ª–∞—Å—å</h2>
                <p>–ü—ã—Ç–∞—é—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...</p>
                <button onclick="window.location.reload(true)" class="reload-button">
                    –û–±–Ω–æ–≤–∏—Ç—å
                </button>
            </div>
        </div>
    `;
}

function showReloadMessage() {
    document.body.innerHTML = `
        <div style="width:100%; height:100%; background-color:black; color:white; 
                   display:flex; flex-direction:column; justify-content:center; align-items:center; 
                   font-family:sans-serif; text-align:center; padding:20px;">
            <div>
                <h2>–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤—è–∑—å</h2>
                <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É</p>
                <button onclick="window.location.reload(true)" class="reload-button">
                    –û–±–Ω–æ–≤–∏—Ç—å
                </button>
            </div>
        </div>
    `;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –±–µ–∑ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è
function updateInterface() {
    // –¢–û–õ–¨–ö–û –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    const audioButton = document.getElementById('toggleAudioButton');
    const videoButton = document.getElementById('toggleVideoButton');
    
    if (audioButton) {
        audioButton.textContent = isAudioMuted ? 'üé§‚ùå' : 'üé§';
        // –í–∞–∂–Ω–æ: –Ω–µ –ø–µ—Ä–µ–ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ —É–∂–µ –µ—Å—Ç—å
        if (!audioButton._listenerAttached) {
            audioButton.onclick = toggleAudio;
            audioButton._listenerAttached = true;
        }
    }
    
    if (videoButton) {
        videoButton.textContent = isVideoOff ? 'üé•‚ùå' : 'üé•';
        if (!videoButton._listenerAttached) {
            videoButton.onclick = toggleVideo;
            videoButton._listenerAttached = true;
        }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    updatePersistentNotifications();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function restoreInterface() {
    if (document.querySelector('.video-container')) {
        return; // –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    }
    
    document.body.innerHTML = `
        <div class="video-container">
            <video id="remoteVideo" autoplay playsinline></video>
            <video id="localVideo" autoplay muted playsinline></video>
            
            <div id="persistentNotifications" class="persistent-notifications"></div>
            
            <div class="controls">
                <button id="toggleAudioButton" class="control-button">üé§</button>
                <button id="toggleVideoButton" class="control-button">üé•</button>
            </div>
            
            <div id="statusNotifications" class="status-notifications"></div>
        </div>
    `;
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–¥–µ–æ –ø–æ—Ç–æ–∫–∏
    if (localStream) {
        document.getElementById('localVideo').srcObject = localStream;
    }
    if (remoteStream) {
        document.getElementById('remoteVideo').srcObject = remoteStream;
    }
    
    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ –ø–æ–º–µ—á–∞–µ–º –∏—Ö –∫–∞–∫ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ
    const audioButton = document.getElementById('toggleAudioButton');
    const videoButton = document.getElementById('toggleVideoButton');
    const localVideo = document.getElementById('localVideo');
    
    if (audioButton) {
        audioButton.onclick = toggleAudio;
        audioButton._listenerAttached = true;
        audioButton.textContent = isAudioMuted ? 'üé§‚ùå' : 'üé§';
    }
    
    if (videoButton) {
        videoButton.onclick = toggleVideo;
        videoButton._listenerAttached = true;
        videoButton.textContent = isVideoOff ? 'üé•‚ùå' : 'üé•';
    }
    
    if (localVideo) {
        localVideo.onclick = switchCamera;
    }
    
    updatePersistentNotifications();
}

function setupSocketEvents() {
    socket.on('you-are-the-first', () => {
        console.log('–í—ã –ø–µ—Ä–≤—ã–π –≤ –∫–æ–º–Ω–∞—Ç–µ. –û–∂–∏–¥–∞–µ–º –≤—Ç–æ—Ä–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞...');
    });
    
    socket.on('user-joined', async (data) => {
        console.log('–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è:', data.newUserId);
        reconnectAttempts = 0;
        await createOffer(data.newUserId);
    });
    
    socket.on('offer', async (data) => {
        console.log('–ü–æ–ª—É—á–µ–Ω offer –æ—Ç:', data.from);
        await createAnswer(data.offer, data.from);
    });
    
    socket.on('answer', async (data) => {
        console.log('–ü–æ–ª—É—á–µ–Ω answer –æ—Ç:', data.from);
        await setRemoteAnswer(data.answer);
    });
    
    socket.on('ice-candidate', async (data) => {
        console.log('–ü–æ–ª—É—á–µ–Ω ICE candidate –æ—Ç:', data.from);
        try {
            await peerConnection.addIceCandidate(new RTCIceCandidate(data.candidate));
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ICE candidate:', error);
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã
    socket.on('room-full', () => {
        console.error('–ö–æ–º–Ω–∞—Ç–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞!');
        showError('–í —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ —É–∂–µ –µ—Å—Ç—å –¥–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É.');
    });
    
    // –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–¢–ê–¢–£–°–û–í (–ë–ï–ó –í–†–ï–ú–ï–ù–ù–´–• –£–í–ï–î–û–ú–õ–ï–ù–ò–ô)
    socket.on('user-status', (data) => {
        console.log('–ü–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å –æ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:', data);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        if (data.hasOwnProperty('audioMuted')) {
            remoteAudioMuted = data.audioMuted;
        }
        
        if (data.hasOwnProperty('videoOff')) {
            remoteVideoOff = data.videoOff;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–ë–ï–ó –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
        updatePersistentNotifications();
    });
    
    socket.on('user-left', (data) => {
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª:', data.userId);
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
        remoteAudioMuted = false;
        remoteVideoOff = false;
        updatePersistentNotifications();
        tryReconnect();
    });
    
    socket.on('disconnect', () => {
        console.log('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ');
        tryReconnect();
    });
    
    socket.on('connect', () => {
        console.log('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        if (roomId) {
            socket.emit('join-room', roomId);
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è: –¢–∞–π–º–∞—É—Ç –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π WebRTC
function waitWithTimeout(promise, timeoutMs, errorMessage) {
    return Promise.race([
        promise,
        new Promise((_, reject) => 
            setTimeout(() => reject(new Error(errorMessage)), timeoutMs)
        )
    ]);
}

function createPeerConnection(targetUserId) {
    peerConnection = new RTCPeerConnection(configuration);

    peerConnection.onconnectionstatechange = () => {
        const state = peerConnection.connectionState;
        console.log('–°–æ—Å—Ç–æ—è–Ω–∏–µ PeerConnection:', state);
        switch(state) {
            case 'connected':
                showTemporaryNotification('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', 'connected'); // –û–°–¢–ê–ï–¢–°–Ø
                reconnectAttempts = 0;
                isReconnecting = false;
                break;
            case 'disconnected':
            case 'failed':
                console.log('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å...');
                break;
            case 'closed':
                console.log('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–∫—Ä—ã—Ç–æ');
                break;
        }
    };

    peerConnection.oniceconnectionstatechange = () => {
        const state = peerConnection.iceConnectionState;
        console.log('ICE —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', state);
        if (state === 'failed') {
            console.error('ICE Gathering –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å –æ—à–∏–±–∫–æ–π. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é.');
        }
        if (state === 'disconnected') {
            console.log('ICE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ (–≤–æ–∑–º–æ–∂–Ω–æ, –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é).');
        }
    };

    peerConnection.onicegatheringstatechange = () => {
        console.log('ICE Gathering —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', peerConnection.iceGatheringState);
    };

    localStream.getTracks().forEach(track => {
        peerConnection.addTrack(track, localStream);
    });

    peerConnection.ontrack = (event) => {
        console.log('–ü–æ–ª—É—á–µ–Ω —É–¥–∞–ª–µ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫');
        remoteStream = event.streams[0];
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–¥–µ–æ –ø–æ—Ç–æ–∫ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø–æ—Ç–æ–∫ –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        const remoteVideo = document.getElementById('remoteVideo');
        if (remoteVideo && !remoteVideo.srcObject) {
            remoteVideo.srcObject = remoteStream;
        }
        
        reconnectAttempts = 0;
        
        // –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (–∫–Ω–æ–ø–∫–∏, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)
        updateInterface();
    };

    peerConnection.onicecandidate = (event) => {
        if (event.candidate) {
            socket.emit('ice-candidate', {
                targetUserId: targetUserId,
                candidate: event.candidate
            });
        }
    };

    return peerConnection;
}

async function createOffer(targetUserId) {
    try {
        peerConnection = createPeerConnection(targetUserId);
        const offer = await waitWithTimeout(
            peerConnection.createOffer(),
            10000,
            '–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ offer'
        );
        await waitWithTimeout(
            peerConnection.setLocalDescription(offer),
            5000,
            '–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ local description'
        );
        socket.emit('offer', {
            targetUserId: targetUserId,
            offer: offer
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è offer:', error);
        showTemporaryNotification('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.', 'error'); // –û–°–¢–ê–ï–¢–°–Ø
    }
}

async function createAnswer(offer, targetUserId) {
    try {
        peerConnection = createPeerConnection(targetUserId);
        await waitWithTimeout(
            peerConnection.setRemoteDescription(new RTCSessionDescription(offer)),
            5000,
            '–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ remote description (offer)'
        );
        const answer = await waitWithTimeout(
            peerConnection.createAnswer(),
            10000,
            '–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ answer'
        );
        await waitWithTimeout(
            peerConnection.setLocalDescription(answer),
            5000,
            '–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ local description (answer)'
        );
        socket.emit('answer', {
            targetUserId: targetUserId,
            answer: answer
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è answer:', error);
        showTemporaryNotification('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.', 'error'); // –û–°–¢–ê–ï–¢–°–Ø
    }
}

async function setRemoteAnswer(answer) {
    try {
        await peerConnection.setRemoteDescription(new RTCSessionDescription(answer));
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ remote description:', error);
        tryReconnect();
    }
}

// –§–£–ù–ö–¶–ò–Ø toggleAudio (–ë–ï–ó –í–†–ï–ú–ï–ù–ù–´–• –£–í–ï–î–û–ú–õ–ï–ù–ò–ô)
async function toggleAudio() {
    if (isProcessingAudio) return;
    
    isProcessingAudio = true;
    console.log('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞—É–¥–∏–æ...');
    
    try {
        if (localStream) {
            const audioTracks = localStream.getAudioTracks();
            if (audioTracks.length > 0) {
                isAudioMuted = !isAudioMuted;
                audioTracks[0].enabled = !isAudioMuted;
                
                const button = document.getElementById('toggleAudioButton');
                button.textContent = isAudioMuted ? 'üé§‚ùå' : 'üé§';
                
                button.style.transform = 'scale(0.9)';
                setTimeout(() => {
                    button.style.transform = 'scale(1)';
                }, 150);
                
                sendStatusToPeer();
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞—É–¥–∏–æ:', error);
    } finally {
        setTimeout(() => {
            isProcessingAudio = false;
        }, 300);
    }
}

// –§–£–ù–ö–¶–ò–Ø toggleVideo (–ë–ï–ó –í–†–ï–ú–ï–ù–ù–´–• –£–í–ï–î–û–ú–õ–ï–ù–ò–ô)
async function toggleVideo() {
    if (isProcessingVideo) return;
    
    isProcessingVideo = true;
    console.log('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–µ–æ...');
    
    try {
        if (localStream) {
            const videoTracks = localStream.getVideoTracks();
            if (videoTracks.length > 0) {
                isVideoOff = !isVideoOff;
                videoTracks[0].enabled = !isVideoOff;
                
                const button = document.getElementById('toggleVideoButton');
                button.textContent = isVideoOff ? 'üé•‚ùå' : 'üé•';
                
                button.style.transform = 'scale(0.9)';
                setTimeout(() => {
                    button.style.transform = 'scale(1)';
                }, 150);
                
                sendStatusToPeer();
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–µ–æ:', error);
    } finally {
        setTimeout(() => {
            isProcessingVideo = false;
        }, 300);
    }
}

function showError(message) {
    document.body.innerHTML = `
        <div style="width:100%; height:100%; background-color:black; color:white; 
                   display:flex; justify-content:center; align-items:center; 
                   font-family:sans-serif; text-align:center; padding:20px;">
            <div>
                <h2>–û—à–∏–±–∫–∞</h2>
                <p>${message}</p>
                <button onclick="window.location.reload(true)" class="reload-button">
                    –û–±–Ω–æ–≤–∏—Ç—å
                </button>
            </div>
        </div>
    `;
}

document.addEventListener('DOMContentLoaded', init);
